package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"os"
	"regexp"
	"strings"
)

// structVisitor collects struct types.
type structVisitor struct {
	structs []*ast.TypeSpec
}

func (v *structVisitor) Visit(node ast.Node) ast.Visitor {
	if node == nil {
		return nil
	}
	switch n := node.(type) {
	case *ast.TypeSpec:
		if _, ok := n.Type.(*ast.StructType); ok {
			v.structs = append(v.structs, n)
		}
	}
	return v
}

var tagRegex = regexp.MustCompile(`json:"([^",\s]+)`)

func parseJsonTagKey(field *ast.Field) string {
	var tag string
	if field.Tag != nil {
		tag = field.Tag.Value
		matches := tagRegex.FindStringSubmatch(tag)
		if len(matches) > 1 {
			return matches[1]
		}
	}
	return ""
}

// generateKeysMethod generates the Keys() method for a struct.
func generateKeysMethod(structName string, structType *ast.StructType) string {
	if structName == "GoogleProtobufAny" {
		return ""
	}
	var fields []string
	for _, field := range structType.Fields.List {
		for _, name := range field.Names {
			if nameField, ok := name.Obj.Decl.(*ast.Field); ok {
				jsonKey := parseJsonTagKey(nameField)
				if jsonKey == "-" {
					continue
				}
				if jsonKey != "" {
					fields = append(fields, fmt.Sprintf("%q: {}", jsonKey))
					continue
				}
			}
			fields = append(fields, fmt.Sprintf("%q: {}", name.Name))
		}
	}
	if len(fields) == 0 {
		return ""
	}
	if len(fields) == 1 && fields[0] == `"updateMask": {}` {
		return ""
	}
	method := fmt.Sprintf(`
func (%[1]s %[2]s) Keys() map[string]struct{} {
    return map[string]struct{}{%[3]s}
}
`, strings.ToLower(string(structName[0])), structName, strings.Join(fields, ", "))
	return method
}

func main() {
	packageName := "api"
	inFilePath := "internal/api/types.gen.go"
	outFilePath := "internal/api/types-keys.gen.go"

	fileSet := token.NewFileSet()
	node, err := parser.ParseFile(fileSet, inFilePath, nil, parser.ParseComments)
	if err != nil {
		fmt.Println("Failed to parse file:", err)
		return
	}

	visitor := &structVisitor{}
	ast.Walk(visitor, node)

	var buf bytes.Buffer

	// Write the package declaration at the top.
	buf.WriteString(`// Code generated by type_keys_generator DO NOT EDIT.`)
	buf.WriteString("\n")
	buf.WriteString("package " + packageName + "\n\n")

	for _, s := range visitor.structs {
		structType, ok := s.Type.(*ast.StructType)
		if !ok {
			continue
		}
		method := generateKeysMethod(s.Name.Name, structType)
		buf.WriteString(method)
	}

	// Format the generated source code.
	src, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Println("Failed to format source:", err)
		return
	}

	// Write to file.
	if err := os.WriteFile(outFilePath, src, 0644); err != nil {
		fmt.Println("Failed to write types-keys.gen.go:", err)
		return
	}
}

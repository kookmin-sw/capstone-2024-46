// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/playground/chat/conversation)
	PlaygroundChatServiceCreateChatConversation(ctx echo.Context) error

	// (POST /v1/threads)
	PlaygroundChatServiceCreateThread(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PlaygroundChatServiceCreateChatConversation converts echo context to params.
func (w *ServerInterfaceWrapper) PlaygroundChatServiceCreateChatConversation(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PlaygroundChatServiceCreateChatConversation(ctx)
	return err
}

// PlaygroundChatServiceCreateThread converts echo context to params.
func (w *ServerInterfaceWrapper) PlaygroundChatServiceCreateThread(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PlaygroundChatServiceCreateThread(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/playground/chat/conversation", wrapper.PlaygroundChatServiceCreateChatConversation)
	router.POST(baseURL+"/v1/threads", wrapper.PlaygroundChatServiceCreateThread)

}

type PlaygroundChatServiceCreateChatConversationRequestObject struct {
	Body *PlaygroundChatServiceCreateChatConversationJSONRequestBody
}

type PlaygroundChatServiceCreateChatConversationResponseObject interface {
	VisitPlaygroundChatServiceCreateChatConversationResponse(w http.ResponseWriter) error
}

type PlaygroundChatServiceCreateChatConversation200JSONResponse CreateChatConversationResponse

func (response PlaygroundChatServiceCreateChatConversation200JSONResponse) VisitPlaygroundChatServiceCreateChatConversationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaygroundChatServiceCreateChatConversationdefaultJSONResponse struct {
	Body       Status
	StatusCode int
}

func (response PlaygroundChatServiceCreateChatConversationdefaultJSONResponse) VisitPlaygroundChatServiceCreateChatConversationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PlaygroundChatServiceCreateThreadRequestObject struct {
}

type PlaygroundChatServiceCreateThreadResponseObject interface {
	VisitPlaygroundChatServiceCreateThreadResponse(w http.ResponseWriter) error
}

type PlaygroundChatServiceCreateThread200JSONResponse CreateThreadResponse

func (response PlaygroundChatServiceCreateThread200JSONResponse) VisitPlaygroundChatServiceCreateThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaygroundChatServiceCreateThreaddefaultJSONResponse struct {
	Body       Status
	StatusCode int
}

func (response PlaygroundChatServiceCreateThreaddefaultJSONResponse) VisitPlaygroundChatServiceCreateThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /v1/playground/chat/conversation)
	PlaygroundChatServiceCreateChatConversation(ctx context.Context, request PlaygroundChatServiceCreateChatConversationRequestObject) (PlaygroundChatServiceCreateChatConversationResponseObject, error)

	// (POST /v1/threads)
	PlaygroundChatServiceCreateThread(ctx context.Context, request PlaygroundChatServiceCreateThreadRequestObject) (PlaygroundChatServiceCreateThreadResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PlaygroundChatServiceCreateChatConversation operation middleware
func (sh *strictHandler) PlaygroundChatServiceCreateChatConversation(ctx echo.Context) error {
	var request PlaygroundChatServiceCreateChatConversationRequestObject

	var body PlaygroundChatServiceCreateChatConversationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PlaygroundChatServiceCreateChatConversation(ctx.Request().Context(), request.(PlaygroundChatServiceCreateChatConversationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaygroundChatServiceCreateChatConversation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PlaygroundChatServiceCreateChatConversationResponseObject); ok {
		return validResponse.VisitPlaygroundChatServiceCreateChatConversationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PlaygroundChatServiceCreateThread operation middleware
func (sh *strictHandler) PlaygroundChatServiceCreateThread(ctx echo.Context) error {
	var request PlaygroundChatServiceCreateThreadRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PlaygroundChatServiceCreateThread(ctx.Request().Context(), request.(PlaygroundChatServiceCreateThreadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaygroundChatServiceCreateThread")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PlaygroundChatServiceCreateThreadResponseObject); ok {
		return validResponse.VisitPlaygroundChatServiceCreateThreadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXXW/buBL9KwPe+9ACipy2b36qm6ZFmhY1Et/bLQJjQ4sjia1EquTIXm2R/74YUo4V",
	"W0naxfZh3ySRnI8zZ4ZH30Vm68YaNOTF9LvwWYm1DI8n1qzReUnamg/ovSyQPzfONuhIY9iUWUNoiB+p",
	"a1BMhSenTSFuEuFsFU6gaWsxvRKt8Q1mOteoRCJaj04kQnqvPUlDYpmI3LpakpjGI8m+SbaJ31rtULG9",
	"re/e0/J2v119wYw4hBOHkvCklDTM5gK/tejpMJs6phmeFfrM6Yb3i6mQzskObA63WxKhCeuw9b8OczEV",
	"/5nssJz0QE7GULy5jTSY5XffecL6/+h88LfvPi7DOq5Dbh0QemJUkkPgqXQo1Zk6tBNXQKtHwR3keWvu",
	"ZxD2jTV+jDBh/0LXeBjdokT4n9F/AOkaPcm6gSfagMfMGuWfMvybEg1QiZCVkoDxrpBPw0Z6iLZVKgZM",
	"UpLwiO2NAaVHIJpBa/S3FkErNMRsdRHvndNdnumY1XrXLLKqPuZievU3OLJMRtAp0KDjHA9D2TIz5RBi",
	"fRYhsjGU4zpw6AlsSp2VoD3IaiM7D9ds+/cdttec5XgT7+38gR7eUv2NNgW6xuk4PPZD1B7y3Q5w2Dj0",
	"DFqow0pmX9Eozj/XResiAMSQ8HJtFVbgWuNho6lMHyV76Idt2ZIhR+9AeT//F6FF7mf9sCMfDuXBZntr",
	"bVHh3FmyqzafmS5wTCnN+ctqPvBJrsV9Bp1YQ1IbD9KAdCtNTroOPDotK/0nqi2FQFbWFAE7kPCSw4jg",
	"RnMrjFUI320eng+NMOp3QXhJ9/LxcVOHqB2gc0mSWj/u4DouXkdPCnNt0IOEyhY6kxWgc9b1xAmpag++",
	"1SRXFYb2VzrP0aEhaJwtnKxrbQpAs9bOmpqZmYA2WdUq/n5xermA2fyMoVZwMT8JLymcBcOtRwWrDq6K",
	"i/nJ8klJ1PjpZFJoKttVmtl6Urgme5rCqczKXejb6mTbMjJXEBqNGXpGT0mS0z6VzCpMtmnFg0kIJn5S",
	"SFJXPoXPtoVMGu42BbYlqK1DkCt+JG7DITJ8vrQbIAsb675GhmgCHWfy1Wx+Bq/R68LA21Yr3OWWVbZV",
	"aRH4GzKUjfYTFfZOggv/9JAxnMR4PX3ApM8yDjBf2rZSsEKmNw8fWMuqDbS66h27JktPrMLlwYc7d4Y2",
	"9OL5jnPaEBbomGI9bGO3RqU9DQVCpFEmnesCOHu4w6JEh2Hq8jVWW77nhgYCU33gXiASWeZN+qO643BU",
	"jKiOwU21n47CNVZci6NcZoHqd6m0j7k2cGqKSvsyhZnpONbxo4Mzlc36Rmdi8Xi/ZdKgPpH+aY/c8oEl",
	"yDVWKgHrBqZXEf6s0mjohyYJ31GYtU5Td8loRi7OGn2O3aylcgSu+RmcYwcryZ0tWypZOmS3EkHzphKl",
	"CpLXSBY/4rej2fzs6Pz08y4mGXxwZV6hdOi23lbh7c2Wn+8+LcT+bJ+3BJ1tHbz7tACyX9EAE4y9B0qw",
	"+Whm546bU9xwvtrkdivnZRZuZKylrlhARSK8XFXS0xGhrLl/d2m84u+wQFnHBrkTVCW7wtnWKGCFyJ41",
	"8U+BmDu9loTw/v0HprdIxHqrfcVxepw+CyqmQSMbLabiRXqcvuDxIKkM1Zisn02aW+sT1iGToRoKV7D1",
	"I9ribS+huO/u11DBedQVfGsPMuFELtGtdYbj2lfECx09vbKq2/tJkk1T9cSYfPExztiyj/5IPPgrc3NX",
	"R/DtHz5EQRIge358/MuD6fVPiOYu7B/PIz1y2Vb0j8XRX/kj/l5HT/3scbvIEkGy8Cy1RmsqlryF6RWV",
	"mL+fSREEHuAGNxC3/xRzomoUv7xOe+r0X16dwXgOf1bDwXy15P+m3sT37YgaN3WzvPkrAAD//xFUyd7+",
	"EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
